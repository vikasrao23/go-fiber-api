// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeatureFlag = `-- name: CreateFeatureFlag :one
INSERT INTO feature_flags (
    description,
    is_global
    ) VALUES ($1, $2)
RETURNING feature_id, description, is_global, created_at, updated_at, feature_layer
`

type CreateFeatureFlagParams struct {
	Description sql.NullString `json:"description"`
	IsGlobal    bool           `json:"is_global"`
}

func (q *Queries) CreateFeatureFlag(ctx context.Context, arg CreateFeatureFlagParams) (FeatureFlag, error) {
	row := q.db.QueryRowContext(ctx, createFeatureFlag, arg.Description, arg.IsGlobal)
	var i FeatureFlag
	err := row.Scan(
		&i.FeatureID,
		&i.Description,
		&i.IsGlobal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeatureLayer,
	)
	return i, err
}

const deleteFeatureFlag = `-- name: DeleteFeatureFlag :exec
DELETE FROM feature_flags 
WHERE feature_id = $1
`

func (q *Queries) DeleteFeatureFlag(ctx context.Context, featureID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeatureFlag, featureID)
	return err
}

const getAllFeatureFlags = `-- name: GetAllFeatureFlags :many
SELECT feature_id, description, is_global, created_at, updated_at, feature_layer FROM feature_flags
`

func (q *Queries) GetAllFeatureFlags(ctx context.Context) ([]FeatureFlag, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeatureFlags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeatureFlag
	for rows.Next() {
		var i FeatureFlag
		if err := rows.Scan(
			&i.FeatureID,
			&i.Description,
			&i.IsGlobal,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeatureLayer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureFlagByFeatureLayer = `-- name: GetFeatureFlagByFeatureLayer :many
SELECT feature_id, description, is_global, created_at, updated_at, feature_layer FROM feature_flags 
WHERE feature_layer = $1
`

func (q *Queries) GetFeatureFlagByFeatureLayer(ctx context.Context, featureLayer FeatureLayer) ([]FeatureFlag, error) {
	rows, err := q.db.QueryContext(ctx, getFeatureFlagByFeatureLayer, featureLayer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeatureFlag
	for rows.Next() {
		var i FeatureFlag
		if err := rows.Scan(
			&i.FeatureID,
			&i.Description,
			&i.IsGlobal,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeatureLayer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
